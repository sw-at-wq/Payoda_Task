# -*- coding: utf-8 -*-
"""payoda.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16VIbrSEp9sVbznCvLzJvTaj49VMFZAmx
"""

import pandas as pd
import matplotlib.pyplot as plt
import itertools
import numpy as np
import seaborn as sns

dataset = pd.read_csv("/content/hepatitis_csv.csv", delimiter = ',')
dataset

dataset.info()

# Finding Data_shape and missing_values

print("data_shape", dataset.shape)
missing_values = dataset.isnull().sum()
print("Missing values:",missing_values)

# Filling missing values with mean

mean_value=dataset[['liver_big','liver_firm','spleen_palpable','spiders','ascites','varices','bilirubin','alk_phosphate','sgot','albumin','protime']].mean()
dataset[['liver_big','liver_firm','spleen_palpable','spiders','ascites','varices','bilirubin','alk_phosphate','sgot','albumin','protime']].fillna(value=dataset[['liver_big','liver_firm','spleen_palpable','spiders','ascites','varices','bilirubin','alk_phosphate','sgot','albumin','protime']].mean(), inplace=True)

dataset = dataset.dropna()

# Distribution of Dataset by Gender

sns.countplot(x='sex',data=dataset,palette="Set1")
plt.title('Distribution of Dataset by Gender')
plt.show()

# Male and Female Distribution

fig, (ax1,ax2) = plt.subplots(nrows=2, ncols=1)
plt.subplots_adjust(wspace=0.2,hspace=0.5)
dataset[dataset['sex']=='male'].age.plot(ax=ax1, kind='hist', bins=10,edgecolor='black')
ax1.set_title('Male Distribution')
dataset[dataset['sex']=='female'].age.plot(ax=ax2, kind='hist',bins=10,edgecolor='black')
ax2.set_title('Female Distribution')
plt.show()

replacements = {'die': 0, 'live': 1}
dataset.replace(replacements, inplace = True)

# Finding no_of_living and dead patients

total_of_patients = dataset.shape[0]
total_of_live_patients = (np.sum(dataset['class'] == 1)/total_of_patients)*100
total_of_dead_patients = (np.sum(dataset['class'] == 0)/total_of_patients)*100
print("Living patients:", round(total_of_live_patients,2),"%")
print("Dead patients:", round(total_of_dead_patients,2),"%")

# Distribution of Dataset by class

sns.countplot(x='class',data=dataset,palette="Set1")
plt.title('Distribution of Dataset by class')
plt.show()

# Finding outliers

outlier_features = ['age','liver_big','liver_firm','spleen_palpable','spiders','ascites','varices','bilirubin','alk_phosphate','sgot','albumin']  
def outliers(df_out, drop = False):
    for each_feature in df_out.columns:
        feature_data = df_out[each_feature]
        Q1 = np.percentile(feature_data, 25.) # 25th percentile of the data of the given feature
        Q3 = np.percentile(feature_data, 75.) # 75th percentile of the data of the given feature
        IQR = Q3-Q1 #Interquartile Range
        outlier_step = IQR * 1.5 #That's we were talking about above
        outliers = feature_data[~((feature_data >= Q1 - outlier_step) & (feature_data <= Q3 + outlier_step))].index.tolist()  
        if not drop:
            print('For the feature {}, No of Outliers is {}'.format(each_feature, len(outliers)))
        if drop:
            dataset.drop(outliers, inplace = True, errors = 'ignore')
            print('Outliers from {} feature removed'.format(each_feature))

outliers(dataset[outlier_features])

outliers(dataset[continous_features], drop = True)

# Plotting a histogram for numerical variables to visualize and confirm their distribution

plt.figure(figsize=(6,3.5))
plt.subplot(1, 2, 1)
sns.distplot(dataset['sgot'],
             kde_kws={"color":"blue","lw":1.5,"alpha":0.8},
             hist_kws={"color":"green","alpha":0.3})
plt.subplot(1, 2, 2)
sns.distplot(dataset['alk_phosphate'],
            kde_kws={"color":"red","lw":1.5,"alpha":0.8},
            hist_kws={"color":"pink","alpha":0.6})
sns.despine();

plt.figure(figsize=(7,3.5))
plt.subplot(1, 2, 1)
sns.distplot(dataset['bilirubin'],
             kde_kws={"color":"green","lw":1.5,"alpha":0.8},
             hist_kws={"color":"lightblue","alpha":0.8})
sns.despine()
plt.subplot(1, 2, 2)
sns.distplot(dataset['albumin'], 
             kde_kws={"color":"red","lw":1.5,"alpha":0.8},
             hist_kws={"color":"orange","alpha":0.3})
sns.despine();
plt.figure(figsize=(6,3.5))
plt.subplot(1, 2, 1)
sns.distplot(dataset['protime'], 
             kde_kws={"color":"orange","lw":1.5,"alpha":0.8},
             hist_kws={"color":"yellow","alpha":0.3})
sns.despine();

g = sns.pairplot(dataset, x_vars = ['bilirubin', 'protime', 'albumin', 'alk_phosphate', 'sgot'], 
               y_vars = ['bilirubin', 'protime', 'albumin', 'alk_phosphate', 'sgot'], 
               hue = 'class', 
               kind= 'scatter',
               palette = 'husl',
               size = 2,
               plot_kws={"s": 35, "alpha": 0.8})
g.fig.get_children()[-1].set_bbox_to_anchor((0.05, 0.9, 0.18, 0.1));

corr = dataset.dropna().corr(method = 'pearson')
cmap = sns.diverging_palette(240, 10, n=9, center = 'light')
sns.heatmap(corr, linewidths=.2, cmap = cmap, cbar_kws={"shrink": .8}, square=True, xticklabels=True, yticklabels=True);
plt.yticks(size= 8, rotation=0) 
plt.xticks(size = 8, rotation = 90);